/***************************************************************************
//
// TESTTSP.H
//
// TAPI Service provider for TSP++ version 3.00
// Designed for Switch Info
//
// Copyright (C) 1999 JulMar Technology, Inc.
// All rights reserved
//
// Generated by the TSPWizard (C) JulMar Technology, Inc.
// 
/***************************************************************************/

#ifndef _TESTTSP_INC_
#define _TESTTSP_INC_

/*----------------------------------------------------------------------------
	INCLUDE FILES
-----------------------------------------------------------------------------*/
#include "resource.h"

/*----------------------------------------------------------------------------
	PRE-DECLARATIONS
-----------------------------------------------------------------------------*/
class CTestTspLine;
class CTestTspDevice;

/*----------------------------------------------------------------------------
	CONSTANTS
-----------------------------------------------------------------------------*/
#define STATE_WAITING		(STATE_INITIAL + 1)
#define REQUEST_TIMEOUT		(10000)				// Timeout for requests (mSec)

/**************************************************************************
** CTestTspServiceProvider
**
** Main provider object which manages the lifetime of the TSP
**
***************************************************************************/
class CTestTspServiceProvider : public CServiceProvider
{
// Constructor
public:
    CTestTspServiceProvider();
	// Overrides from CServiceProvider
public:
    virtual LONG providerEnumDevices(DWORD dwProviderId, LPDWORD lpNumLines, LPDWORD lpNumPhones, HPROVIDER hProvider, LINEEVENT lpfnLineCreateProc, PHONEEVENT lpfnPhoneCreateProc);
};

/**************************************************************************
** CTestTspDevice
**
** Device object which manages a connection to hardware device
**
***************************************************************************/
class CTestTspDevice : public CTSPIDevice
{
// Class Data
protected:
	HANDLE m_hevtStop;						// Stop event
	HANDLE m_hConnThread;					// Thread running hardware connection
	CRITICAL_SECTION m_csData;				// CS protecting queue
	
// Constructor/Destructor
public:
	CTestTspDevice();
	virtual ~CTestTspDevice();

// Input thread function
public:
	unsigned ConnectionThread();

// Overriden functions from CTSPIDevice
protected:
	friend class CTestTspLine;
    virtual bool Init(DWORD dwProviderId, DWORD dwBaseLine, DWORD dwBasePhone, DWORD dwLines, DWORD dwPhones, HPROVIDER hProvider, ASYNC_COMPLETION lpfnCompletion);

// Internal functions
protected:
	CTSPIConnection* LocateOwnerFromEvent(LPCVOID pEvent);
};

/**************************************************************************
** CTestTspLine
**
** Line object which manages a single line on the hardware
**
***************************************************************************/
class CTestTspLine : public CTSPILineConnection
{
// Constructor/Destructor
public:
	CTestTspLine();
	virtual ~CTestTspLine();

// Overrides from CTSPILineConnection
public:
	CTestTspDevice* GetDeviceInfo() const { return (CTestTspDevice*) CTSPIConnection::GetDeviceInfo(); }
protected:
    virtual void Init(CTSPIDevice* pDev, DWORD dwLineDeviceID, DWORD dwPos, DWORD dwItemData=0);
	virtual DWORD OnAddressFeaturesChanged (CTSPIAddressInfo* pAddr, DWORD dwFeatures);
	virtual DWORD OnLineFeaturesChanged(DWORD dwLineFeatures);
	virtual DWORD OnCallFeaturesChanged(CTSPICallAppearance* pCall, DWORD dwCallFeatures);
	virtual bool OpenDevice();
	virtual bool UnsolicitedEvent(LPCVOID lpBuff);
	virtual void OnTimer();
	virtual LONG GenericDialogData(LPVOID lpvItemData, LPVOID lpParams, DWORD dwSize);

	// Create the event map
	DECLARE_TSPI_REQUESTS()

	// TSPI handlers
	bool OnDropCall(RTDropCall* pReq, LPCVOID lpBuff);
	bool OnMakeCall(RTMakeCall* pReq, LPCVOID lpBuff);
	bool OnDial(RTDial* pReq, LPCVOID lpBuff);

// Internal methods
private:
	void InitializeStation();
	void InitAddress(CTSPIAddressInfo* pAddress);
};

#endif // _TESTTSP_INC_
