/***************************************************************************
//
// TESTTSP.CPP
//
// TAPI Service provider for TSP++ version 3.00
// Main TAPI Service Provider shell
//
// Copyright (C) 1999 JulMar Technology, Inc.
// All rights reserved
//
// Generated by the TSPWizard (C) JulMar Technology, Inc.
// 
/***************************************************************************/

/*-------------------------------------------------------------------------------*/
// INCLUDE FILES
/*-------------------------------------------------------------------------------*/
#include "stdafx.h"
#include "TestTsp.h"

/*----------------------------------------------------------------------------
	DEBUG SUPPORT
-----------------------------------------------------------------------------*/
#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/*-------------------------------------------------------------------------------*/
// CONSTANTS AND GLOBALS
/*-------------------------------------------------------------------------------*/
CTestTspServiceProvider theSP;

/*-------------------------------------------------------------------------------*/
// RTTI overrides of TSP++ objects
/*-------------------------------------------------------------------------------*/
DECLARE_TSPI_OVERRIDE(CTestTspDevice);
DECLARE_TSPI_OVERRIDE(CTestTspLine);

/*****************************************************************************
** Procedure:  CTestTspServiceProvider::CTestTspServiceProvider
**
** Arguments:  void
**
** Returns:    void
**
** Description:  This is the constructor for the provider object.  It
**               is responsible for initializing the UI.DLL name and the
**               provider manufacturer names.  In additional, any overrides
**               of class objects should be performed here.
**
*****************************************************************************/
CTestTspServiceProvider::CTestTspServiceProvider() : 
	CServiceProvider(_T("TestTsp.TSP"),		// Name of UI DLL
					 _T("Provider Info"),
					 TAPIVER_20)
{   
	OutputDebugString("CTestTspServiceProvider constructor, TAPISRV=");
	if (IsRunningUnderTapiSrv())
		OutputDebugString("Yes\r\n");
	else
		OutputDebugString("No\r\n");

	// Setup our line device and phone device object override.
	SetRuntimeObjects (
		"CTestTspDevice",	// Device override 
		"CTestTspLine",		// Line override
		NULL,						// Address override
		NULL,						// Call override
		NULL,						// Conference call override
		NULL);						// Phone override

#ifdef _DEBUG
	// Set the highest trace level if we are a debug build
	SetTraceLevel(TRC_API);
#endif

}// CTestTspServiceProvider::CTestTspServiceProvider

/*****************************************************************************
** Procedure:  CTestTspServiceProvider::providerEnumDevices
**
** Arguments:  'dwProviderId'	-	Passed provider ID from TAPI
**             'lpNumLines'		-	Returning count of lines
**             'lpNumPhones'	-	Returning count of phones
**			   'hProvider'		-	Handle to the provider from TAPI
**			   'lpfnLineC..'	-	Line creation PROC for LINE_CREATE
**			   'lpfnPhoneC..'	-	Phone creation PROC for PHONE_CREATE	
**
** Returns:    TAPI result code
**
** Description:  This is called after the constructor to determine how many
**				 lines and phones the provider is managing.  This is called
**				 BEFORE providerInit.
**
**				 It is a required function under TAPI 2.x
**
*****************************************************************************/
LONG CTestTspServiceProvider::providerEnumDevices(DWORD dwProviderId, LPDWORD lpNumLines,
	LPDWORD lpNumPhones, HPROVIDER hProvider, 
	LINEEVENT lpfnLineCreateProc, PHONEEVENT lpfnPhoneCreateProc)
{   
	// Pass it onto the base class and let the library know about the provider handle.  
	// This is required for dynamic UI dialog support.
	LONG lResult = CServiceProvider::providerEnumDevices(dwProviderId, lpNumLines, lpNumPhones, hProvider, lpfnLineCreateProc, lpfnPhoneCreateProc);
	if (lResult == 0)
	{
		// TODO: Read the count of lines and phones from some static persistant
		// storage and supply them here. 
		*lpNumLines	 = 1;
		*lpNumPhones = 0;
	}
    return lResult;

}// CTestTspServiceProvider::providerEnumDevices
