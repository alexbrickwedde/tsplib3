/***************************************************************************
//
// CONFERENCE.CPP
//
// TAPI Service provider for TSP++ version 3.00
// Manage conference events
//
// Copyright (C) 1999 JulMar Technology, Inc.
// All rights reserved
//
// Generated by the TSPWizard (C) JulMar Technology, Inc.
// 
/***************************************************************************/

/*----------------------------------------------------------------------------
	INCLUDE FILES
-----------------------------------------------------------------------------*/
#include "stdafx.h"
#include "ConfTest.h"

/*****************************************************************************
** Procedure:  CConfTestLine::OnSetupConference
**
** Arguments: 'pReq' - Request object representing this SetupConf event
**            'lpBuff' - The event block pointer
**
** Returns:    void
**
** Description:  This function manages the TSPI_lineSetupConference processing
**               for this service provider.
**
*****************************************************************************/
bool CConfTestLine::OnSetupConference(RTSetupConference* pRequest, LPCVOID lpBuff)
{
	CTSPIConferenceCall* pConfCall = pRequest->GetConferenceCall();
	CTSPICallAppearance* pCall = pRequest->GetOriginalCall();
	CTSPICallAppearance* pConsult = pRequest->GetConsultationCall();

	if (pRequest->EnterState(STATE_INITIAL, STATE_WAITING))
	{
		pConfCall->SetCallState(LINECALLSTATE_ONHOLDPENDCONF);
		pCall->SetCallState(LINECALLSTATE_CONFERENCED);
		pConsult->SetCallState(LINECALLSTATE_DIALTONE, LINEDIALTONEMODE_NORMAL, LINEMEDIAMODE_INTERACTIVEVOICE);
		CompleteRequest(pRequest, 0);
	}
	return false;

}// CConfTestLine::OnSetupConf

/*****************************************************************************
** Procedure:  CConfTestLine::OnPrepareAddToConference
**
** Arguments: 'pReq' - Request object representing this PrepareConf event
**            'lpBuff' - The event block pointer
**
** Returns:    void
**
** Description:  This function manages the TSPI_linePrepareAddToConference processing
**               for this service provider.
**
*****************************************************************************/
bool CConfTestLine::OnPrepareAddToConference(RTPrepareAddToConference* pRequest, LPCVOID lpBuff)
{
	CTSPIConferenceCall* pConfCall = pRequest->GetConferenceCall();
	CTSPICallAppearance* pConsult = pRequest->GetConsultationCall();
	if (pRequest->EnterState(STATE_INITIAL, STATE_WAITING))
	{
		pConfCall->SetCallState(LINECALLSTATE_ONHOLDPENDCONF);
		pConsult->SetCallState(LINECALLSTATE_DIALTONE, LINEDIALTONEMODE_NORMAL, LINEMEDIAMODE_INTERACTIVEVOICE);
		CompleteRequest(pRequest, 0);
	}
	return false;

}// CConfTestLine::OnPrepareAddToConference

/*****************************************************************************
** Procedure:  CConfTestLine::OnAddToConference
**
** Arguments: 'pReq' - Request object representing this AddToConference event 
**            'lpBuff' - The event block pointer
**
** Returns:    void
**
** Description:  This function manages the TSPI_lineAddToConference processing
**               for this service provider.
**
*****************************************************************************/
bool CConfTestLine::OnAddToConference(RTAddToConference* pRequest, LPCVOID lpBuff)
{
	CTSPIConferenceCall* pConfCall = pRequest->GetConferenceCall();
	CTSPICallAppearance* pConsult = pRequest->GetConsultationCall();
	if (pRequest->EnterState(STATE_INITIAL, STATE_WAITING))
	{
		pConsult->SetCallState(LINECALLSTATE_CONFERENCED);
		pConfCall->SetCallState(LINECALLSTATE_CONNECTED);
		CompleteRequest(pRequest, 0);
	}
	return false;

}// CConfTestLine::OnAddToConference

/*****************************************************************************
** Procedure:  CConfTestLine::OnRemoveFromConf
**
** Arguments: 'pReq' - Request object representing this RemoveFromConf event 
**            'lpBuff' - The event block pointer
**
** Returns:    void
**
** Description:  This function manages the TSPI_lineRemoveFromConference 
**               processing for this service provider.
**
*****************************************************************************/
bool CConfTestLine::OnRemoveFromConference(RTRemoveFromConference* pRequest, LPCVOID lpBuff)
{
	CTSPIConferenceCall* pConfCall = pRequest->GetConferenceCall();
	CTSPICallAppearance* pCall = pRequest->GetCallToRemove();
	if (pRequest->EnterState(STATE_INITIAL, STATE_WAITING))
	{
		pCall->SetCallState(LINECALLSTATE_IDLE);
		CompleteRequest(pRequest, 0);
	}
	return false;

}// CConfTestLine::OnRemoveFromConference
