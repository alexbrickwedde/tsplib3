/***************************************************************************
//
// CONFTEST.CPP
//
// TAPI Service provider for TSP++ version 3.00
// Main TAPI Service Provider shell
//
// Copyright (C) 1999 JulMar Technology, Inc.
// All rights reserved
//
// Generated by the TSPWizard (C) JulMar Technology, Inc.
// 
/***************************************************************************/

/*-------------------------------------------------------------------------------*/
// INCLUDE FILES
/*-------------------------------------------------------------------------------*/
#include "stdafx.h"
#include "ConfTest.h"
#include <fstream.h>
#include <atlconv.h>

/*-------------------------------------------------------------------------------*/
// CONSTANTS AND GLOBALS
/*-------------------------------------------------------------------------------*/
CConfTestServiceProvider theSP;

/*-------------------------------------------------------------------------------*/
// RTTI overrides of TSP++ objects
/*-------------------------------------------------------------------------------*/
DECLARE_TSPI_OVERRIDE(CConfTestDevice);
DECLARE_TSPI_OVERRIDE(CConfTestLine);

/*****************************************************************************
** Procedure:  CConfTestServiceProvider::CConfTestServiceProvider
**
** Arguments:  void
**
** Returns:    void
**
** Description:  This is the constructor for the provider object.  It
**               is responsible for initializing the UI.DLL name and the
**               provider manufacturer names.  In additional, any overrides
**               of class objects should be performed here.
**
*****************************************************************************/
CConfTestServiceProvider::CConfTestServiceProvider() : 
	CServiceProvider(_T("ConfTest.TSP"),		// Name of UI DLL
					 _T("Test Conference Provider"),
					 TAPIVER_21)
{   
	// Setup our line device and phone device object override.
	SetRuntimeObjects (
		"CConfTestDevice",	// Device override 
		"CConfTestLine",		// Line override
		NULL,						// Address override
		NULL,						// Call override
		NULL,						// Conference call override
		NULL);						// Phone override

#ifdef _DEBUG
	// Turn on tracing level for debug builds -- see SPLIB.H for
	// additional tracing flags.
	SetTraceLevel(TRC_API |			// TSPI_xxx entrypoints (requires JTTSPTRC.dll)
				  TRC_DUMP |		// TSPI buffers (requires JTTSPTRC.dll)
				  TRC_MIN |			// Basic tracing inside library
				  TRC_WARNINGS |	// Warnings from TSP++
				  TRC_STRUCT |		// Structures
				  TRC_STATS |		// Statistics on calls/addresses/lines
				  TRC_OBJECTS |		// Object creation/destruction
				  TRC_THREADS);		// Thread creation/destruction
	ActivateTraceLog();
#endif

}// CConfTestServiceProvider::CConfTestServiceProvider

/*****************************************************************************
** Procedure:  CConfTestServiceProvider::providerEnumDevices
**
** Arguments:  'dwProviderId'	-	Passed provider ID from TAPI
**             'lpNumLines'		-	Returning count of lines
**             'lpNumPhones'	-	Returning count of phones
**			   'hProvider'		-	Handle to the provider from TAPI
**			   'lpfnLineC..'	-	Line creation PROC for LINE_CREATE
**			   'lpfnPhoneC..'	-	Phone creation PROC for PHONE_CREATE	
**
** Returns:    TAPI result code
**
** Description:  This is called after the constructor to determine how many
**				 lines and phones the provider is managing.  This is called
**				 BEFORE providerInit.
**
**				 It is a required function under TAPI 2.x
**
*****************************************************************************/
LONG CConfTestServiceProvider::providerEnumDevices(DWORD dwProviderId, LPDWORD lpNumLines,
	LPDWORD lpNumPhones, HPROVIDER hProvider, 
	LINEEVENT lpfnLineCreateProc, PHONEEVENT lpfnPhoneCreateProc)
{   
	// Pass it onto the base class and let the library know about the provider handle.  
	// This is required for dynamic UI dialog support.
	LONG lResult = CServiceProvider::providerEnumDevices(dwProviderId, lpNumLines, lpNumPhones, hProvider, lpfnLineCreateProc, lpfnPhoneCreateProc);
	if (lResult == 0)
	{
		// TODO: Read the count of lines and phones from some static persistant
		// storage and supply them here. 
		*lpNumLines	 = 1;
		*lpNumPhones = 0;
	}
    return lResult;

}// CConfTestServiceProvider::providerEnumDevices

/*****************************************************************************
** Procedure:  CConfTestServiceProvider::TraceOut
**
** Arguments:  'strBuff' - Buffer to output
**
** Returns:    void
**
** Description:  This is called on an idle thread to save off the debug
**               contents to persistant storage.
**
*****************************************************************************/
void CConfTestServiceProvider::TraceOut(TString& strBuff)
{
	// Simple logging function -- _very_ inefficient!! Do not copy
	// this code in production!!!
	USES_CONVERSION;
	fstream fLog("c:\\conftest.txt",ios::app); 
	fLog << W2A(strBuff.c_str());
	fLog.close();

}// CConfTestServiceProvider::TraceOut
