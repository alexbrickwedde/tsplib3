/***************************************************************************
//
// CONFTEST.H
//
// TAPI Service provider for TSP++ version 3.00
// Designed for Internal No-Switch
//
// Copyright (C) 1999 JulMar Technology, Inc.
// All rights reserved
//
// Generated by the TSPWizard (C) JulMar Technology, Inc.
// 
/***************************************************************************/

#ifndef _CONFTEST_INC_
#define _CONFTEST_INC_

/*----------------------------------------------------------------------------
	INCLUDE FILES
-----------------------------------------------------------------------------*/
#include "resource.h"
#include <poolmgr.h>

/*----------------------------------------------------------------------------
	PRE-DECLARATIONS
-----------------------------------------------------------------------------*/
class CConfTestLine;
class CConfTestDevice;

/*----------------------------------------------------------------------------
	CONSTANTS
-----------------------------------------------------------------------------*/
#define STATE_WAITING		(STATE_INITIAL + 1)
#define REQUEST_TIMEOUT		(10000)				// Timeout for requests (mSec)

/**************************************************************************
** CPBXEvent
**
** Structure/object which is used to encapsulate device event information
**
***************************************************************************/
typedef struct
{
	// TODO: Add h/w event elements here
	TCHAR chBuff[1];
} CPBXEvent;

/**************************************************************************
** CConfTestServiceProvider
**
** Main provider object which manages the lifetime of the TSP
**
***************************************************************************/
class CConfTestServiceProvider : public CServiceProvider
{
// Constructor
public:
    CConfTestServiceProvider();
	// Overrides from CServiceProvider
public:
	virtual void TraceOut(TString& strBuff);
    virtual LONG providerEnumDevices(DWORD dwProviderId, LPDWORD lpNumLines, LPDWORD lpNumPhones, HPROVIDER hProvider, LINEEVENT lpfnLineCreateProc, PHONEEVENT lpfnPhoneCreateProc);
};

/**************************************************************************
** CConfTestDevice
**
** Device object which manages a connection to hardware device
**
***************************************************************************/
class CConfTestDevice : public CTSPIDevice
{
// Class Data
protected:
	HANDLE m_hevtStop;						// Stop event
	HANDLE m_hConnThread;					// Thread running hardware connection
	CRITICAL_SECTION m_csData;				// CS protecting queue
	CThreadPoolMgr<DWORD, CPBXEvent*> m_mgrThreads;	// Thread pool manager class
	
// Constructor/Destructor
public:
	CConfTestDevice();
	virtual ~CConfTestDevice();

// Input thread function
public:
	unsigned ConnectionThread();

// Overriden functions from CTSPIDevice
protected:
	friend class CConfTestLine;
    virtual bool Init(DWORD dwProviderId, DWORD dwBaseLine, DWORD dwBasePhone, DWORD dwLines, DWORD dwPhones, HPROVIDER hProvider, ASYNC_COMPLETION lpfnCompletion);

// Internal functions
protected:
	CTSPIConnection* LocateOwnerFromEvent(CPBXEvent* pEvent);
};

/**************************************************************************
** CConfTestLine
**
** Line object which manages a single line on the hardware
**
***************************************************************************/
class CConfTestLine : public CTSPILineConnection
{
// Constructor/Destructor
public:
	CConfTestLine();
	virtual ~CConfTestLine();

// Overrides from CTSPILineConnection
public:
	CConfTestDevice* GetDeviceInfo() const { return (CConfTestDevice*) CTSPIConnection::GetDeviceInfo(); }
protected:
    virtual void Init(CTSPIDevice* pDev, DWORD dwLineDeviceID, DWORD dwPos, DWORD dwItemData=0);
	virtual DWORD OnAddressFeaturesChanged (CTSPIAddressInfo* pAddr, DWORD dwFeatures);
	virtual DWORD OnLineFeaturesChanged(DWORD dwLineFeatures);
	virtual DWORD OnCallFeaturesChanged(CTSPICallAppearance* pCall, DWORD dwCallFeatures);
	virtual bool OpenDevice();
	virtual bool UnsolicitedEvent(LPCVOID lpBuff);
	virtual void OnTimer();

	// Create the event map
	DECLARE_TSPI_REQUESTS()

	// TSPI handlers
	bool OnAccept(RTAccept* pRequest, LPCVOID lpBuff);
	bool OnAnswer(RTAnswer* pRequest, LPCVOID lpBuff);
	bool OnDropCall(RTDropCall* pReq, LPCVOID lpBuff);
	bool OnMakeCall(RTMakeCall* pReq, LPCVOID lpBuff);
	bool OnHoldCall(RTHold* pReq, LPCVOID lpBuff);
	bool OnRetrieveCall(RTUnhold* pReq, LPCVOID lpBuff);
	bool OnSwapHold(RTSwapHold* pReq, LPCVOID lpBuff);
	bool OnDial(RTDial* pReq, LPCVOID lpBuff);
	bool OnSetupConference(RTSetupConference* pReq, LPCVOID lpBuff);
	bool OnAddToConference(RTAddToConference* pReq, LPCVOID lpBuff);
	bool OnPrepareAddToConference(RTPrepareAddToConference* pReq, LPCVOID lpBuff);
	bool OnRemoveFromConference(RTRemoveFromConference* pReq, LPCVOID lpBuff);

// Internal methods
private:
	void InitializeStation();
	void InitAddress(CTSPIAddressInfo* pAddress);
};

#endif // _CONFTEST_INC_
