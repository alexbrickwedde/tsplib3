/***************************************************************************
//
// LINE.CPP
//
// TAPI Service provider for TSP++ version 3.00
// Line management functions
//
// Copyright (C) 1999 Test
// All rights reserved
//
// Generated by the TSPWizard (C) JulMar Technology, Inc.
// 
/***************************************************************************/

/*-------------------------------------------------------------------------------*/
// INCLUDE FILES
/*-------------------------------------------------------------------------------*/
#include "stdafx.h"
#include "Test.h"
#include <spbstrm.h>

/*----------------------------------------------------------------------------
	GLOBALS AND CONSTANTS
-----------------------------------------------------------------------------*/
const UINT MAXCALLDATA_SIZE = 4096;

/*-------------------------------------------------------------------------------*/
// TSPI Request map
/*-------------------------------------------------------------------------------*/
BEGIN_TSPI_REQUEST(CTestLine)
	ON_AUTO_TSPI_REQUEST(REQUEST_SETCALLDATA)
	ON_TSPI_REQUEST_MAKECALL(OnMakeCall)
	ON_TSPI_REQUEST_DIAL(OnDial)
	ON_TSPI_REQUEST_DROPCALL(OnDropCall)
END_TSPI_REQUEST()

/*****************************************************************************
** Procedure:  CTestLine::CTestLine
**
** Arguments: void
**
** Returns:    void
**
** Description:  Constructor for the line object
**
*****************************************************************************/
CTestLine::CTestLine()
{
	// TODO: place any constructor code here

}// CTestLine::CTestLine

/*****************************************************************************
** Procedure:  CTestLine::~CTestLine
**
** Arguments: void
**
** Returns:    void
**
** Description:  Destructor for the line object
**
*****************************************************************************/
CTestLine::~CTestLine()
{
	// TODO: destroy any allocated memory here

}// CTestLine::~CTestLine

/*****************************************************************************
** Procedure:  CTestLine::read
**
** Arguments:  'istm' - Input stream
**
** Returns:    pointer to istm
**
** Description:  This function is called to serialize data in from the
**               registry.  The line object has already been completely
**               initialized by the TSP++ library
**
*****************************************************************************/
TStream& CTestLine::read(TStream& istm)
{
	// Always call the base class to read in default line information
	CTSPILineConnection::read(istm);

	// TODO: Read any information stored in the line stream
	istm >> m_strTest;
	istm >> m_dwTest;

	char chBuff[512];
	wsprintf(chBuff, "Loaded %s, %d", m_strTest.c_str(), m_dwTest);
	MessageBox(NULL, chBuff, "Line::read", MB_OK | MB_SERVICE_NOTIFICATION);

    LPLINEDEVCAPS lpLineCaps = GetLineDevCaps();
	// TODO: Adjust the device capabilities for this line

	// TODO: Add any WAV devices which will be used for I/O - locate your WAV drive
	// and use the device identifier given by the multimedia system.
	// AddDeviceClass(_T("wave/in"), dwWaveInDeviceID);
	// AddDeviceClass(_T("wave/out"), dwWaveOutDeviceID);

	// Configure the line based on the type
	switch (GetLineType())
	{
		case Station:			InitializeStation(); break;
		default:				break;
	}

	return istm;

}// CTestLine::read

/*****************************************************************************
** Procedure:  CTestLine::InitializeStation
**
** Arguments:  void
**
** Returns:    void
**
** Description:  This function is called to initialize a station line object.
**
*****************************************************************************/
void CTestLine::InitializeStation()
{
	LPLINEDEVCAPS lpCaps = GetLineDevCaps();


	// TODO: Adjust the ADDRESSCAPS based on this being a station
	for (int iAddress = 0; iAddress < GetAddressCount(); iAddress++)
	{
		CTSPIAddressInfo* pAddress = GetAddress(iAddress);
		_TSP_ASSERTE (pAddress != NULL);

		// Initialize the address information to be the basic set of information
		InitAddress(pAddress);

		// TODO: Adjust the address capabilities based on a station capabilities.
		// Look at the CTestLine::InitAddress function to see how the
		// address is configured for all lines.
	}

}// CTestLine::InitializeStation

/*****************************************************************************
** Procedure:  CTestLine::InitAddress
**
** Arguments:  'pAddr' - Address object to initialize
**
** Returns:    void
**
** Description:  This function is called to initialize a single address
**
*****************************************************************************/
void CTestLine::InitAddress(CTSPIAddressInfo* pAddress)
{
	_TSP_ASSERTE (pAddress != NULL);
	LPLINEADDRESSCAPS lpAddrCaps = pAddress->GetAddressCaps();
	lpAddrCaps->dwMaxCallDataSize = MAXCALLDATA_SIZE;

	// Set the dialtone modes
	lpAddrCaps->dwDialToneModes &= ~(LINEDIALTONEMODE_INTERNAL | LINEDIALTONEMODE_EXTERNAL | LINEDIALTONEMODE_SPECIAL);

	// TODO: Adjust the address capabilities to reflect the device
	// features and abilities. The wizard has set the following flags
	// for you based on your requested feature set:

	// The phone is not automatically taken off hook
	lpAddrCaps->dwAddrCapFlags &= ~LINEADDRCAPFLAGS_ORIGOFFHOOK;

}// CTestLine::InitAddress

/*****************************************************************************
** Procedure:  CTestLine::OnAddressFeaturesChanged
**
** Arguments:  'pAddr' - Address features are changing on
**             'dwFeatures' - New features for address
**
** Returns:    New features for address
**
** Description: This method is called when the features of the address change
**              It gives the derived code an opportunity to adjust the reflected
**              features before TAPI is notified.
**
*****************************************************************************/
DWORD CTestLine::OnAddressFeaturesChanged (CTSPIAddressInfo* pAddr, DWORD dwFeatures)
{
	// TODO: Adjust any features for the address based on the current state of the
	// hardware. This is where you can restrict the features shown in the provider for
	// special cases.
	return CTSPILineConnection::OnAddressFeaturesChanged(pAddr, dwFeatures);

}// CTestLine::OnAddressFeaturesChanged

/*****************************************************************************
** Procedure:  CTestLine::OnLineFeaturesChanged
**
** Arguments:  'dwFeatures' - New features for line
**
** Returns:    New features for address
**
** Description: This method is called when the features of the line change.
**              It gives the derived code an opportunity to adjust the reflected
**              features before TAPI is notified.
**
*****************************************************************************/
DWORD CTestLine::OnLineFeaturesChanged (DWORD dwFeatures)
{
	// TODO: Adjust any features for the line based on the current state of the
	// hardware. This is where you can restrict the features shown in the provider for
	// special cases.
	return CTSPILineConnection::OnLineFeaturesChanged(dwFeatures);

}// CTestLine::OnLineFeaturesChanged

/*****************************************************************************
** Procedure:  CTestLine::OnCallFeaturesChanged
**
** Arguments:  'pCall' - Call that changed
**             'dwCallFeatures' - new feature list
**
** Returns:    true/false success indicator
**
** Description: This method is called whenever the call features have changed due to
**              state changes.  The address/line have also been adjusted by the time
**              this function is called.
**
*****************************************************************************/
DWORD CTestLine::OnCallFeaturesChanged(CTSPICallAppearance* pCall, DWORD dwCallFeatures)
{      
	// TODO: Adjust the call features for the given call based on information
	// associated with the call and hardware capabilities.
	return CTSPILineConnection::OnCallFeaturesChanged(pCall, dwCallFeatures);

}// CTestLine::OnCallFeaturesChanged

/*****************************************************************************
** Procedure:  CTestLine::OpenDevice
**
** Arguments:  void
**
** Returns:    void
**
** Description: This method is called when the phone is opened by TAPI.
**              It may be used to check the link to the switch and fail the
**              lineOpen() call to TAPI so that no line operations can
**              occur.
**
*****************************************************************************/
bool CTestLine::OpenDevice()
{
	// TODO: Validate the connection to the hardware and return FALSE if it
	// is not connected or pass through to the default implementation if it is.
	return CTSPILineConnection::OpenDevice();

}// CTestLine::OpenDevice

/*****************************************************************************
** Procedure:  CTestLine::OnTimer
**
** Arguments:  void
**
** Returns:    void
**
** Description: This method is called periodically by the interval timer
**
*****************************************************************************/
void CTestLine::OnTimer()
{
	// Poll the active request for timeout. This is not necessary if you
	// do not implement time-out conditions for the switch. Note that the
	// interval is controlled by the "SetIntervalTimer" in device.cpp (Init)
	ReceiveData();

}// CTestLine::OnTimer

