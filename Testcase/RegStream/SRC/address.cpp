/***************************************************************************
//
// ADDRESS.CPP
//
// TAPI Service provider for TSP++ version 3.00
// CTSPIAddressInfo override
//
// Copyright (C) 1999 Test
// All rights reserved
//
// Generated by the TSPWizard (C) JulMar Technology, Inc.
// 
/***************************************************************************/

/*----------------------------------------------------------------------------
	INCLUDE FILES
-----------------------------------------------------------------------------*/
#include "stdafx.h"
#include "Test.h"
#include <spbstrm.h>

/*****************************************************************************
** Procedure:  CTestAddress::CTestAddress
**
** Arguments: void
**
** Returns:    void
**
** Description:  Constructor for the address object
**
*****************************************************************************/
CTestAddress::CTestAddress()
{
	// TODO: place any constructor code here

}// CTestAddress::CTestAddress

/*****************************************************************************
** Procedure:  CTestAddress::~CTestAddress
**
** Arguments: void
**
** Returns:    void
**
** Description:  Destructor for the address object
**
*****************************************************************************/
CTestAddress::~CTestAddress()
{
	// TODO: destroy any allocated memory here

}// CTestAddress::~CTestAddress

/*****************************************************************************
** Procedure:  CTestAddress::read
**
** Arguments: 'istm' - I/O stream to read information from
**
** Returns:    I/O stream buffer
**
** Description:  This function is called to read the address information
**               from a registry stream buffer.
**
*****************************************************************************/
TStream& CTestAddress::read(TStream& istm)
{
	// Pass through to the base class to read address information
	CTSPIAddressInfo::read(istm);

	// TODO: Read any information stored in the line stream
	istm >> m_strTest;
	istm >> m_dwTest;

	char chBuff[512];
	wsprintf(chBuff, "Loaded %s, %d", m_strTest.c_str(), m_dwTest);
	MessageBox(NULL, chBuff, "Address::read", MB_OK | MB_SERVICE_NOTIFICATION);

	return istm;

}// CTestAddress::read
