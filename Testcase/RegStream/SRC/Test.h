/***************************************************************************
//
// TEST.H
//
// TAPI Service provider for TSP++ version 3.00
// Designed for Switch
//
// Copyright (C) 1999 Test
// All rights reserved
//
// Generated by the TSPWizard (C) JulMar Technology, Inc.
// 
/***************************************************************************/

#ifndef _TEST_INC_
#define _TEST_INC_

/*----------------------------------------------------------------------------
	INCLUDE FILES
-----------------------------------------------------------------------------*/
#include "resource.h"

/*----------------------------------------------------------------------------
	PRE-DECLARATIONS
-----------------------------------------------------------------------------*/
class CTestLine;
class CTestDevice;

/*----------------------------------------------------------------------------
	CONSTANTS
-----------------------------------------------------------------------------*/
#define STATE_WAITING		(STATE_INITIAL + 1)
#define REQUEST_TIMEOUT		(10000)				// Timeout for requests (mSec)

/**************************************************************************
** TEvent
**
** Structure/object which is used to encapsulate device event information
**
***************************************************************************/
typedef struct
{
	// TODO: Add h/w event elements here
	TCHAR chBuff[1];
} TEvent;

/**************************************************************************
** CTestServiceProvider
**
** Main provider object which manages the lifetime of the TSP
**
***************************************************************************/
class CTestServiceProvider : public CServiceProvider
{
// Constructor
public:
    CTestServiceProvider();
};

/**************************************************************************
** CTestDevice
**
** Device object which manages a connection to hardware device
**
***************************************************************************/
class CTestDevice : public CTSPIDevice
{
// Class data
private:
	DWORD m_dwTest;
	TString m_strTest;
	
// Unavailable functions (due to base class)
private:
	CTestDevice(const CTestDevice&);
	const CTestDevice& operator=(const CTestDevice&);
	
// Class Data
protected:
	HANDLE m_hevtStop;						// Stop event
	HANDLE m_hConnThread;					// Thread running hardware connection
	CRITICAL_SECTION m_csData;				// CS protecting queue
	
// Constructor/Destructor
public:
	CTestDevice();
	virtual ~CTestDevice();

// Input thread function
public:
	unsigned ConnectionThread();

// Overriden functions from CTSPIDevice
protected:
	friend class CTestLine;
    virtual bool Init(DWORD dwProviderId, DWORD dwBaseLine, DWORD dwBasePhone, DWORD dwLines, DWORD dwPhones, HPROVIDER hProvider, ASYNC_COMPLETION lpfnCompletion);
	virtual TStream& read(TStream& istm);

// Internal functions
protected:
	CTSPIConnection* LocateOwnerFromEvent(TEvent* pEvent);
};

/**************************************************************************
** CTestLine
**
** Line object which manages a single line on the hardware
**
***************************************************************************/
class CTestLine : public CTSPILineConnection
{
// Class data
private:
	DWORD m_dwTest;
	TString m_strTest;

// Unavailable functions (due to base class)
private:
	CTestLine(const CTestLine&);
	const CTestLine& operator=(const CTestLine&);

// Constructor/Destructor
public:
	CTestLine();
	virtual ~CTestLine();

// Overrides from CTSPILineConnection
public:
	CTestDevice* GetDeviceInfo() const { return (CTestDevice*) CTSPIConnection::GetDeviceInfo(); }
	virtual TStream& read(TStream& istm);
protected:
	virtual DWORD OnAddressFeaturesChanged (CTSPIAddressInfo* pAddr, DWORD dwFeatures);
	virtual DWORD OnLineFeaturesChanged(DWORD dwLineFeatures);
	virtual DWORD OnCallFeaturesChanged(CTSPICallAppearance* pCall, DWORD dwCallFeatures);
	virtual bool OpenDevice();
	virtual bool UnsolicitedEvent(LPCVOID lpBuff);
	virtual void OnTimer();

	// Create the event map
	DECLARE_TSPI_REQUESTS()

	// TSPI handlers
	bool OnDropCall(RTDropCall* pReq, LPCVOID lpBuff);
	bool OnMakeCall(RTMakeCall* pReq, LPCVOID lpBuff);
	bool OnDial(RTDial* pReq, LPCVOID lpBuff);

// Internal methods
private:
	void InitializeStation();
	void InitAddress(CTSPIAddressInfo* pAddress);
};

/**************************************************************************
** CTestAddress
**
** Address object which supercedes each created address on a line
**
***************************************************************************/
class CTestAddress : public CTSPIAddressInfo
{
// Class data
private:
	DWORD m_dwTest;
	TString m_strTest;
	
// Unavailable functions (due to base class)
private:
	CTestAddress(const CTestAddress&);
	const CTestAddress& operator=(const CTestAddress&);

// Constructor/Destructor
public:
	CTestAddress();
	virtual ~CTestAddress();

// Initialization override from CTSPIAddressInfo
public:
	virtual TStream& read(TStream& istm);
};

#endif // _TEST_INC_
