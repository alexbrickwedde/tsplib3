/***************************************************************************
//
// TESTUI.cpp
//
// TAPI Service provider for TSP++ version 3.00
// User-Interface main entrypoint
//
// Copyright (C) 1999 Test
// All rights reserved
//
// Generated by the TSPWizard (C) JulMar Technology, Inc.
// 
/***************************************************************************/

/*-------------------------------------------------------------------------------*/
// INCLUDE FILES
/*-------------------------------------------------------------------------------*/
#include "stdafx.h"
#include "TestUI.h"
#include "config.h"
#include <spbstrm.h>

/*-------------------------------------------------------------------------------*/
// RTTI Support
/*-------------------------------------------------------------------------------*/
IMPLEMENT_DYNCREATE(CUIDevice, CTSPUIDevice)
IMPLEMENT_DYNCREATE(CUILine, CTSPUILineConnection)
IMPLEMENT_DYNCREATE(CUIAddress, CTSPUIAddressInfo)

/*----------------------------------------------------------------------------
	GLOBALS AND CONSTANTS
-----------------------------------------------------------------------------*/
CTspUIApp theApp;

/*****************************************************************************
** Procedure:  CTspUIApp::CTspUIApp
**
** Arguments:  void
**
** Returns:    void
**
** Description:  Constructor for the UI application dll
**
*****************************************************************************/
CTspUIApp::CTspUIApp() : 
	CServiceProvider(_T("Provider"))
{
	// You must assign the overriden objects to the library 
	// so they are serialized properly when reloaded if you add additional
	// data to the iostream (read/write overriden).
	SetRuntimeObjects(
		RUNTIME_CLASS(CUIDevice),		// Device override
		RUNTIME_CLASS(CUILine),			// Line device
		RUNTIME_CLASS(CUIAddress),		// Address object
		NULL);

}// CTspUIApp::CTspUIApp

/*****************************************************************************
** Procedure:  CTspUIApp::providerInstall
**
** Arguments:  'dwPermanentProviderID' - Provider ID
**             'pwndOwner' - Owner window handle
**
** Returns:    TAPI 2.x result code
**
** Description:  This method is invoked when the TSP is to be installed via 
**               the TAPI install code.  It should insure that all the correct 
**               files are there, and write out the initial .INI settings.
**
*****************************************************************************/
LONG CTspUIApp::providerInstall(DWORD dwPermanentProviderID, CWnd* pwndOwner)
{
	// Check to see if this provider is already installed. If so we will not
	// install it a second time.
	DWORD dwMyPPid = 0;
	LONG lResult = IsProviderInstalled(AfxGetAppName(), &dwMyPPid);
	if (lResult == 0) // Returns LINEERR_NOMULTIPLEINSTANCE if already installed
	{
		// Create the device object which represents this provider. 
		AddDevice(dwPermanentProviderID);

		// Pass through to the TSP++ library to add registry keys and such.
		// If that is successful, then run the configuration for this device.
		lResult = CServiceProvider::providerInstall(dwPermanentProviderID, pwndOwner);
		if (lResult == 0)
		{
			// TODO: Show a user interface dialog if necessary and prompt the
			// user for information concerning line and phone devices present
			// on the hardware.
			CConfigDlg dlg(pwndOwner);
			if (dlg.DoModal() == IDOK)
			{
				// TODO: Remove the following code - it is here to create a
				// sample line and phone so the generated provider will have
				// devices. The first parameter is a unique identifier for the device
				// which is used to locate the device in the provider code.
				GetDeviceByIndex(0)->AddLine(new CUILine(100, CTSPUILineConnection::Station, _T("Line Device")));
				// Save off all our registry data. This is a built-in function of 
				// the TSP++ UI library and dumps all created objects into the registry.
				SaveObjects();
			}
			
			// Otherwise cancel the installation.
			else
				lResult = LINEERR_OPERATIONFAILED;
		}
	}
	return lResult;

}// CTspUIApp::providerInstall

/*****************************************************************************
** Procedure:  CTspUIApp::providerConfig
**
** Arguments:  'dwPPID' - Provider ID
**             'pwndOwner' - Owner window handle
**
** Returns:    TAPI 2.x result code
**
** Description:  This method is invoked when the user selects our ServiceProvider
**				 icon in the control panel.  It should invoke the configuration 
**               dialog which must be provided by the derived class.
**
*****************************************************************************/
LONG CTspUIApp::providerConfig(DWORD dwProviderID, CWnd* pwndOwner)
{
	// TODO: Show a user interface dialog of all the configuration
	// data for all lines and phones on the hardware.
	CConfigDlg dlg(pwndOwner);
	if (dlg.DoModal() == IDOK)
	{
		// Save off all our registry data. This is a built-in function of 
		// the TSP++ UI library and dumps all created objects into the registry.
		SaveObjects();
	}
	return 0;

}// CTspUIApp::providerConfig

/*****************************************************************************
** Procedure:  CTspUIApp::lineConfigDialog
**
** Arguments:  'dwDeviceID' - Line Device ID
**             'pwndOwner' - Owner window handle
**             'strDeviceClass' - Device class we are working with
**
** Returns:    TAPI 2.x result code
**
** Description:  This method is called to display the line configuration dialog
**				 when the user requests it through either the TAPI api or the 
**               control panel applet.
**
*****************************************************************************/
LONG CTspUIApp::lineConfigDialog(DWORD dwDeviceID, CWnd* pwndOwner, CString& /*strDeviceClass*/) 
{
	// Convert the device id into a permanent device id to ensure that we
	// have the correct line device.  Normally the dwDeviceID is simply an
	// index into our line array but if there is more than one provider installed
	// the base might not be zero.
	DWORD dwpLID;
	if (GetUISP()->GetPermanentIDFromLineDeviceID(dwDeviceID, &dwpLID) == 0)
	{
		// NOTE: This assumes a single device object per provider - this is not a 
		// requirement of TSP++, but is typical of most providers.
		CTSPUILineConnection* pLine = GetUISP()->GetDeviceByIndex(0)->FindLineConnectionByPermanentID(dwpLID);
		if (pLine != NULL)
		{
			// TODO: Show user-interface for configuring this specific
			// line device.
			return FALSE;
		}
	}
	return LINEERR_OPERATIONFAILED;

}// CTspUIApp::lineConfigDialog

/*****************************************************************************
** Procedure:  CUIDevice::CUIDevice
**
** Arguments:  void
**
** Returns:    void
**
** Description: Default constructor for the device object
**
*****************************************************************************/
CUIDevice::CUIDevice()
{
	// TODO: Initialize any data
	m_strTest = "Device Object";
	m_dwTest = 5000;

}// CUIDevice::CUIDevice

/*****************************************************************************
** Procedure:  CUIDevice::read
**
** Arguments:  'istm' - Input iostream
**
** Returns:    iostream reference
**
** Description: This is called to read information in from the registry.
**
*****************************************************************************/
TStream& CUIDevice::read(TStream& istm)
{
	// Always call the base class!
	CTSPUIDevice::read(istm);

	// TODO: Read any addition information from the registry stream
	// using the direct stream >> and << operators.
	//
	// WARNING: Make sure to coordinate the read/write functions
	istm >> m_strTest;
	istm >> m_dwTest;

	return istm;

}// CUIDevice::read

/*****************************************************************************
** Procedure:  CUIDevice::write
**
** Arguments:  'ostm' - Input iostream
**
** Returns:    iostream reference
**
** Description: This is called to read information in from the registry.
**
*****************************************************************************/
TStream& CUIDevice::write(TStream& ostm) const
{
	// Always call the base class!
	CTSPUIDevice::write(ostm);

	// TODO: Write any addition information into the registry stream
	// using the direct stream >> and << operators.
	//
	// WARNING: Make sure to coordinate the read/write functions
	ostm << m_strTest;
	ostm << m_dwTest;

	return ostm;

}// CUIDevice::write

/*****************************************************************************
** Procedure:  CUILine::CUILine
**
** Arguments:  void
**
** Returns:    void
**
** Description: Default constructor for the line object
**
*****************************************************************************/
CUILine::CUILine()
{
	// TODO: Initialize any data

}// CUILine::CUILine

/*****************************************************************************
** Procedure:  CUILine::CUILine
**
** Arguments:  'dwDeviceID' - Device identifier
**             'iType' - Type of line device (Station, RoutePoint, etc.)
**             'pszName' - Name of line device
**
** Returns:    void
**
** Description:  Constructor for the line device
**
*****************************************************************************/
CUILine::CUILine(DWORD dwDeviceID, int iType, LPCTSTR pszName) : 
	CTSPUILineConnection(dwDeviceID, iType, pszName)
{
	m_strTest = _T("Line Object");
	m_dwTest = 5001;
		
    // Create each dialable number (address) which exists on each line.
	for (int iAddress = 0; iAddress < 1; iAddress++)
	{
		// TODO: Replace these entries with the name and dialable number
		// of each address created.
		TCHAR chBuff[20], chBuff2[20];
		wsprintf(chBuff, _T("Address %d"), iAddress);	
		wsprintf(chBuff2, _T("%d"), 100+iAddress);

		switch (GetLineType())
		{
			case CTSPUILineConnection::Station:
				CreateAddress(chBuff2, chBuff, true, true,
					LINEMEDIAMODE_UNKNOWN | LINEMEDIAMODE_INTERACTIVEVOICE,	LINEBEARERMODE_VOICE,
					0, 0, NULL, 1, 0, 0, 0, 0);
				break;
			default: ASSERT(FALSE);
		}
	}

}// CUILine::CUILine

/*****************************************************************************
** Procedure:  CUILine::read
**
** Arguments:  'istm' - Input iostream
**
** Returns:    iostream reference
**
** Description: This is called to read information in from the registry.
**
*****************************************************************************/
TStream& CUILine::read(TStream& istm)
{
	// Always call the base class!
	CTSPUILineConnection::read(istm);

	// TODO: Read any addition information from the registry stream
	// using the direct stream >> and << operators.
	//
	// WARNING: Make sure to coordinate the read/write functions
	istm >> m_strTest;
	istm >> m_dwTest;

	return istm;

}// CUILine::read

/*****************************************************************************
** Procedure:  CUILine::write
**
** Arguments:  'ostm' - Input iostream
**
** Returns:    iostream reference
**
** Description: This is called to read information in from the registry.
**
*****************************************************************************/
TStream& CUILine::write(TStream& ostm) const
{
	// Always call the base class!
	CTSPUILineConnection::write(ostm);

	// TODO: Write any addition information into the registry stream
	// using the direct stream >> and << operators.
	//
	// WARNING: Make sure to coordinate the read/write functions
	ostm << m_strTest;
	ostm << m_dwTest;

	return ostm;

}// CUILine::write

/*****************************************************************************
** Procedure:  CUIAddress::CUIAddress
**
** Arguments:  void
**
** Returns:    void
**
** Description: Default constructor for the address object
**
*****************************************************************************/
CUIAddress::CUIAddress()
{
	// TODO: Initialize any data
	m_strTest = _T("Address Object");
	m_dwTest = 5002;

}// CUIAddress::CUIAddress

/*****************************************************************************
** Procedure:  CUIAddress::read
**
** Arguments:  'istm' - Input iostream
**
** Returns:    iostream reference
**
** Description: This is called to read information in from the registry.
**
*****************************************************************************/
TStream& CUIAddress::read(TStream& istm)
{
	// Always call the base class!
	CTSPUIAddressInfo::read(istm);

	// TODO: Read any addition information from the registry stream
	// using the direct stream >> and << operators.
	//
	// WARNING: Make sure to coordinate the read/write functions
	istm >> m_strTest;
	istm >> m_dwTest;

	return istm;

}// CUIAddress::read

/*****************************************************************************
** Procedure:  CUIAddress::write
**
** Arguments:  'ostm' - Input iostream
**
** Returns:    iostream reference
**
** Description: This is called to read information in from the registry.
**
*****************************************************************************/
TStream& CUIAddress::write(TStream& ostm) const
{
	// Always call the base class!
	CTSPUIAddressInfo::write(ostm);

	// TODO: Write any addition information into the registry stream
	// using the direct stream >> and << operators.
	//
	// WARNING: Make sure to coordinate the read/write functions
	ostm << m_strTest;
	ostm << m_dwTest;

	return ostm;

}// CUIAddress::write


