/***************************************************************************
//
// TESTUI.h
//
// TAPI Service provider for TSP++ version 3.00
// User-Interface main entrypoint
//
// Copyright (C) 1999 Test
// All rights reserved
//
// Generated by the TSPWizard (C) JulMar Technology, Inc.
// 
/***************************************************************************/

#if _MSC_VER >= 1000
#pragma once
#endif // _MSC_VER >= 1000

#ifndef __TESTUI_INC__
#define __TESTUI_INC__

#include "resource.h"       // main symbols

/**************************************************************************
** CTspUIApp
**
** This object is our connection to the service provider
**
***************************************************************************/
class CTspUIApp : public CServiceProvider
{
// Class data
protected:
	DWORD m_dwProviderID;

// Constructor
public:
	CTspUIApp();

// Publics
public:
	DWORD GetProviderID() const { return m_dwProviderID; }

// TSPI overrides.
public:
	// This method is invoked when the user selects our ServiceProvider
	// icon in the control panel.  It should invoke the configuration dialog
	// which must be provided by the derived class.
	virtual LONG providerConfig(DWORD dwPPID, CWnd* pwndOwner);

	// This method is invoked when the TSP is to be installed via the
	// TAPI install code.  It should insure that all the correct files
	// are there, and write out the initial registry settings.
	virtual LONG providerInstall(DWORD dwPermanentProviderID, CWnd* pwndOwner);

	// This method is called to display the line configuration dialog
	// when the user requests it through either the TAPI api or the control
	// panel applet.
	virtual LONG lineConfigDialog(DWORD dwDeviceID, CWnd* pwndOwner, CString& strDeviceClass);

// Overrides
	// ClassWizard generated virtual function overrides
	//{{AFX_VIRTUAL(CTspUIApp)
	//}}AFX_VIRTUAL
};

/**************************************************************************
** CUIDevice
**
** This object is an override for the device object. It stores off 
** TCP/IP information into the registry stream.
**
***************************************************************************/
class CUIDevice : public CTSPUIDevice
{
// Class data
private:
	CString m_strTest;
	DWORD m_dwTest;
	
// Constructor
protected:
	CUIDevice();
	DECLARE_DYNCREATE(CUIDevice)

// Serialization support
protected:
	virtual TStream& write(TStream& ostm) const;
	virtual TStream& read(TStream& istm);
};

/**************************************************************************
** CUILine
**
** This object is an override for the line object to add additional
** data to the line.
**
***************************************************************************/
class CUILine : public CTSPUILineConnection
{
// Class data
private:
	CString m_strTest;
	DWORD m_dwTest;

// Constructor which adds data to the line.
public:
	CUILine();
	CUILine(DWORD dwDeviceID, int iType, LPCTSTR pszName);
	DECLARE_DYNCREATE(CUILine)

// Serialization support
protected:
	virtual TStream& write(TStream& ostm) const;
	virtual TStream& read(TStream& istm);
};

/**************************************************************************
** CUIAddress
**
** This object is an override for the address object to add additional
** data to the address.
**
***************************************************************************/
class CUIAddress : public CTSPUIAddressInfo
{
// Class data
private:
	CString m_strTest;
	DWORD m_dwTest;
	
// Make it dynamically creatable.
public:
	CUIAddress();
	DECLARE_DYNCREATE(CUIAddress)

// Serialization support
protected:
	virtual TStream& write(TStream& ostm) const;
	virtual TStream& read(TStream& istm);
};


#endif // __JTSPUI_INC__


